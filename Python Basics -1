Numbers: In Python, numbers primarily include integers and floats.

Integers are whole numbers, which can be positive, negative, or zero, without any decimal point. For example: 1, 2, -1, 0.
Floats represent numbers with decimal points. For example: 3.14, -2.5, 0.0.
Complex numbers are also supported in Python, represented with a real and an imaginary part. For example: 2 + 3j.
Strings: Strings are sequences of characters enclosed in quotes, commonly used for textual data. They can be single ('...') or double-quoted ("..."). For example: "Hello, World!" or 'Python123'. Strings are immutable, meaning they cannot be changed after creation.

Lists: Lists are ordered collections of mutable (changeable) elements, enclosed in square brackets. Lists allow elements of different data types and can contain duplicates. For example: [1, 32, 3] or ["apple", "banana", "cherry"]. Lists support various operations like appending, removing, and sorting.

Tuples: Tuples are similar to lists but are immutable, meaning their elements cannot be changed once created. They are ordered, meaning the items retain a defined sequence, and can be accessed by their index. Tuples are enclosed in parentheses. For example: (1, 2, 3) or ("dog", "cat", "mouse"). They are useful for storing related data that should not be modified.

Dictionaries: Dictionaries are collections of key-value pairs, enclosed in curly braces, where each key is unique and maps to a specific value. Dictionaries are ordered by insertion order in Python 3.7 and above, meaning the items retain the order in which they were added. For example: {"name": "Alice", "age": 25, "city": "New York"}. They are useful for organizing data that can be accessed by key.

Sets: Sets are unordered collections of unique elements, enclosed in curly braces. Sets do not allow duplicate values and are useful for operations like union, intersection, and difference. For example: {1, 2, 3} or {"apple", "banana", "cherry"}.
